package lib

import (
	"fmt"
	"sync"
)

var counter int
var mu sync.Mutex

// incrementは、ミューテックス・ロックを使用して共有カウンタ変数をインクリメントする関数である。
//
// この関数は、カウンタをインクリメントする前にミューテックスのロックを取得することで、一度に 1 つのゴルーチンだけがカウンタ変数にアクセスできるようにします。
//
// カウンタをインクリメントした後、他のゴルーチンがカウンタ変数にアクセスできるように、ミューテックスのロックを解放します。※解放しない場合アクセスができずデッドロックによりpanicになります
func increment() {
	mu.Lock()   // ミューテックスをロック
	counter++   // counterの値をインクリメント
	mu.Unlock() // ロックを解放（ここで開放しない場合アクセスができずデッドロックによりpanicが生じる）
}

// MutexProcessは、並行環境におけるミューテックスの使い方を示す関数である。
//
// この関数は 1000 個のゴルーチンを作成し、各ゴルーチンが increment 関数を呼び出す。
//
// インクリメント関数は、ミューテックスを使用して、共有カウンタ変数を安全にインクリメントする。
//
// すべてのゴルーチンが終了すると、カウンターの最終値が表示される。
func MutexProcess() {
	// 複数のゴルーチンの完了を待機するための同期プリミティブです。
	// 全てのgoroutineによる並行処理が終わるまで待機する
	var wg sync.WaitGroup

	// 1000 回繰り返しで、無名関数をゴルーチンとして実行します。
	// increment() をゴルーチン内で呼び出すことで、並行して複数のゴルーチンがカウンタをインクリメントします。
	for _ = range make([]struct{}, 1000) {
		// 各ゴルーチンが開始される前に、WaitGroup に「待機するゴルーチンの数」を 1 増やします。
		// これにより、wg.Wait() が 1000 回のゴルーチン終了を待つことができます。
		wg.Add(1)

		go func() {
			// ゴルーチン終了時にカウントを減らす
			defer wg.Done()

			// カウンタをインクリメント
			increment()
		}()
	}

	// すべてのゴルーチンが完了するまで待つ
	wg.Wait()
	fmt.Println("counter:", counter) // Expected output: 1000
}
